//
//  CalculateExchangeRatePresenter.swift
//  Currencies
//
//  Created by Jakub Hutny on 14.12.2016.
//  Copyright (c) 2016 Jakub Hutny. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CalculateExchangeRatePresenterInput
{
    func presentFetchedCurrencies(response: CalculateExchangeRate.FetchCurrencies.Response)
    func presentGetInputLabelName(response: CalculateExchangeRate.InputLabel.Response)
    func presentGetOutputLabelName(response: CalculateExchangeRate.OutputLabel.Response)
    func presentResultLabel(response: CalculateExchangeRate.ResultLabel.Response)
}

protocol CalculateExchangeRatePresenterOutput: class
{
    func displayFetchedCurrencies(viewModel: CalculateExchangeRate.FetchCurrencies.ViewModel)
    func displayInputLabelName(viewModel: CalculateExchangeRate.InputLabel.ViewModel)
    func displayOutputLabelName(viewModel: CalculateExchangeRate.OutputLabel.ViewModel)
    func displayResultLabel(viewModel: CalculateExchangeRate.ResultLabel.ViewModel)
}

class CalculateExchangeRatePresenter: CalculateExchangeRatePresenterInput
{
    weak var output: CalculateExchangeRatePresenterOutput!
  
    // MARK: - Presentation logic
  
    func presentFetchedCurrencies(response: CalculateExchangeRate.FetchCurrencies.Response) {
        var displayedCurrencies: [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency] = []
        for currency in response.currencies {
            let name = currency.name
            let displayedCurrency = CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: name)
            displayedCurrencies.append(displayedCurrency)
        }
        let date = formatDateToDisplay(dateToBeFormatted: response.date)
        let viewModel = CalculateExchangeRate.FetchCurrencies.ViewModel(date: date, displayedCurrencies: displayedCurrencies)
        output.displayFetchedCurrencies(viewModel: viewModel)
    }
    
    func presentGetInputLabelName(response: CalculateExchangeRate.InputLabel.Response) {
        let nameToDisplay = response.name
        let viewModel = CalculateExchangeRate.InputLabel.ViewModel(name: nameToDisplay)
        output.displayInputLabelName(viewModel: viewModel)
    }
    
    func presentGetOutputLabelName(response: CalculateExchangeRate.OutputLabel.Response) {
        let nameToDisplay = response.name
        let viewModel = CalculateExchangeRate.OutputLabel.ViewModel(name: nameToDisplay)
        output.displayOutputLabelName(viewModel: viewModel)
    }
    
    func presentResultLabel(response: CalculateExchangeRate.ResultLabel.Response) {
        let nameToDisplay = NSString(format: "%.3f", response.result) as String
        let viewModel = CalculateExchangeRate.ResultLabel.ViewModel(name: nameToDisplay)
        output.displayResultLabel(viewModel: viewModel)
    }
    
    private func formatDateToDisplay(dateToBeFormatted: String) -> String{
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd"
        dateFormatter.timeZone = TimeZone.ReferenceType.default
        
        var date = dateFormatter.date(from: dateToBeFormatted)
        date = date?.addHours(plus: 1)
        
        dateFormatter.dateStyle = .long
        dateFormatter.locale = Locale(identifier: "en_US")
        let formattedDate = dateFormatter.string(from: date!)
        
        return "Quotation date: " + formattedDate
    }
}
