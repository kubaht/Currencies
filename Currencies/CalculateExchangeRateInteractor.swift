//
//  CalculateExchangeRateInteractor.swift
//  Currencies
//
//  Created by Jakub Hutny on 14.12.2016.
//  Copyright (c) 2016 Jakub Hutny. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CalculateExchangeRateInteractorInput
{
    func fetchCurrencies(request: CalculateExchangeRate.FetchCurrencies.Request)
    func getInputLabelName(request: CalculateExchangeRate.InputLabel.Request)
    func getOutputLabelName(request: CalculateExchangeRate.OutputLabel.Request)
    func getResultLabel(request: CalculateExchangeRate.ResultLabel.Request)
    func calculateExchangeResult(request: CalculateExchangeRate.ResultLabel.Request)
}

protocol CalculateExchangeRateInteractorOutput
{
    func presentFetchedCurrencies(response: CalculateExchangeRate.FetchCurrencies.Response)
    func presentGetInputLabelName(response: CalculateExchangeRate.InputLabel.Response)
    func presentGetOutputLabelName(response: CalculateExchangeRate.OutputLabel.Response)
    func presentResultLabel(response: CalculateExchangeRate.ResultLabel.Response)
}

class CalculateExchangeRateInteractor: CalculateExchangeRateInteractorInput
{
    var output: CalculateExchangeRateInteractorOutput!
    var currenciesWorker = CurrenciesWorker(currenciesStore: CurrenciesAPI())
    var calculateExchangeRateWorker = CalculateExchangeRateWorker()
  
  // MARK: - Business logic
    
    func fetchCurrencies(request: CalculateExchangeRate.FetchCurrencies.Request) {
        currenciesWorker.fetchCurrencies { (currency, date) -> Void in
            let response = CalculateExchangeRate.FetchCurrencies.Response(currencies: currency, date: date)
            self.output.presentFetchedCurrencies(response: response)
        }
    }
    
    func getInputLabelName(request: CalculateExchangeRate.InputLabel.Request) {
        let response = CalculateExchangeRate.InputLabel.Response(name: calculateExchangeRateWorker.InputLabelName)
        self.output.presentGetInputLabelName(response: response)
    }
    
    func getOutputLabelName(request: CalculateExchangeRate.OutputLabel.Request) {
        let response = CalculateExchangeRate.OutputLabel.Response(name: calculateExchangeRateWorker.OutputLabelName)
        self.output.presentGetOutputLabelName(response: response)
    }
    
    func getResultLabel(request: CalculateExchangeRate.ResultLabel.Request) {
        let result = calculateExchangeRateWorker.calculateResult(isOnStart: request.isOnStart)
        let response = CalculateExchangeRate.ResultLabel.Response(result: result)
        self.output.presentResultLabel(response: response)
    }
    
    func calculateExchangeResult(request: CalculateExchangeRate.ResultLabel.Request) {
        let result: Double
        let inputRate = currenciesWorker.getCurrency(with: request.inputCurrency).value
        let outputRate = currenciesWorker.getCurrency(with: request.outputCurrency).value
        if let amount = Double(request.amount) {
            result = calculateExchangeRateWorker.calculateResult(isOnStart: false, inputRate: inputRate, outputRate: outputRate, amount: amount)
        }
        else {
            result = calculateExchangeRateWorker.calculateResult(isOnStart: false, inputRate: inputRate, outputRate: outputRate, amount: 0.0)
        }
        let response = CalculateExchangeRate.ResultLabel.Response(result: result)
        self.output.presentResultLabel(response: response)
    }
}
