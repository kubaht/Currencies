//
//  CalculateExchangeRateViewController.swift
//  Currencies
//
//  Created by Jakub Hutny on 14.12.2016.
//  Copyright (c) 2016 Jakub Hutny. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CalculateExchangeRateViewControllerInput
{
    func displayFetchedCurrencies(viewModel: CalculateExchangeRate.FetchCurrencies.ViewModel)
    func displayInputLabelName(viewModel: CalculateExchangeRate.InputLabel.ViewModel)
    func displayOutputLabelName(viewModel: CalculateExchangeRate.OutputLabel.ViewModel)
    func displayResultLabel(viewModel: CalculateExchangeRate.ResultLabel.ViewModel)
}

protocol CalculateExchangeRateViewControllerOutput
{
    func fetchCurrencies(request: CalculateExchangeRate.FetchCurrencies.Request)
    func getInputLabelName(request: CalculateExchangeRate.InputLabel.Request)
    func getOutputLabelName(request: CalculateExchangeRate.OutputLabel.Request)
    func getResultLabel(request: CalculateExchangeRate.ResultLabel.Request)
    func calculateExchangeResult(request: CalculateExchangeRate.ResultLabel.Request)
}

class CalculateExchangeRateViewController: UIViewController, CalculateExchangeRateViewControllerInput, UIPickerViewDataSource, UIPickerViewDelegate
{
    var output: CalculateExchangeRateViewControllerOutput!
    var router: CalculateExchangeRateRouter!
    var displayedCurrencies: [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency] = []

    // MARK: - Outlets
    
    @IBOutlet var inputLabel: UILabel!
    @IBOutlet var outputLabel: UILabel!
    @IBOutlet var resultLabel: UILabel!
    @IBOutlet var inputCurrencyPickerView: UIPickerView!
    @IBOutlet var outputCurrencyPickerView: UIPickerView!
    @IBOutlet var quotationLabel: UILabel!
    @IBOutlet var inputTextField: UITextField!
    @IBOutlet var activityIndicator: UIActivityIndicatorView!
    
    // MARK: - Object lifecycle
  
    override func awakeFromNib()
    {
        super.awakeFromNib()
        CalculateExchangeRateConfigurator.sharedInstance.configure(viewController: self)
    }
  
    // MARK: - View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setPickerViewDelegate(pickerView: self.inputCurrencyPickerView)
        setPickerViewDelegate(pickerView: self.outputCurrencyPickerView)
        setPickerViewDataSource(pickerView: self.inputCurrencyPickerView)
        setPickerViewDataSource(pickerView: self.outputCurrencyPickerView)
        getDataOnLoad()
        dismissKeyboardWhenTap()
    }
  
    // MARK: - Event handling
    
    func getDataOnLoad() {
        animateDuringFetchingData()
        fetchCurrencies()
        getInputLabelName()
        getOutputLabelName()
        getResultsLabelName(isOnStart: true)
    }
    
    @IBAction func inputTextFieldEditingEnd(_ sender: UITextField) {
        calculateExchangeResult()
        dismissKeyboard()
    }
    
    func dismissKeyboardWhenTap() {
        self.view.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(CalculateExchangeRateViewController.dismissKeyboard)))
    }
    
    func dismissKeyboard() {
        view.endEditing(true)
    }
    
    // MARK: - Getting data logic
    
    func fetchCurrencies() {
        let fetchCurrenciesRequest = CalculateExchangeRate.FetchCurrencies.Request()
        output.fetchCurrencies(request: fetchCurrenciesRequest)
    }
    
    func getInputLabelName() {
        let inputLabelRequest = CalculateExchangeRate.InputLabel.Request()
        output.getInputLabelName(request: inputLabelRequest)
    }
    
    func getOutputLabelName() {
        let outputLabelRequest = CalculateExchangeRate.OutputLabel.Request()
        output.getOutputLabelName(request: outputLabelRequest)
    }
    
    func getResultsLabelName(isOnStart: Bool) {
        let resultLabelRequest = CalculateExchangeRate.ResultLabel.Request(isOnStart: isOnStart)
        output.getResultLabel(request: resultLabelRequest)
    }
    
    func calculateExchangeResult() {
        let amount = inputTextField.text!
        let inputCurrency = displayedCurrencies[inputCurrencyPickerView.selectedRow(inComponent: 0)].name
        let outputCurrency = displayedCurrencies[outputCurrencyPickerView.selectedRow(inComponent: 0)].name
        let request = CalculateExchangeRate.ResultLabel.Request(amount: amount, inputCurrency: inputCurrency, outputCurrency: outputCurrency)
        output.calculateExchangeResult(request: request)
    }
  
    // MARK: - Display logic
  
    func displayFetchedCurrencies(viewModel: CalculateExchangeRate.FetchCurrencies.ViewModel) 
    {
        displayedCurrencies = viewModel.displayedCurrencies
        quotationLabel.text = viewModel.date
        inputCurrencyPickerView.reloadAllComponents()
        outputCurrencyPickerView.reloadAllComponents()
        
        stopAnimatingWhenDataFetched()
    }
    
    func displayInputLabelName(viewModel: CalculateExchangeRate.InputLabel.ViewModel) {
        inputLabel.text = viewModel.name
    }
    
    func displayOutputLabelName(viewModel: CalculateExchangeRate.OutputLabel.ViewModel) {
        outputLabel.text = viewModel.name
    }
    
    func displayResultLabel(viewModel: CalculateExchangeRate.ResultLabel.ViewModel) {
        resultLabel.text = viewModel.name
    }
    
    
    // MARK: - UIPickerView data source and delegate methods
    
    func setPickerViewDelegate(pickerView: UIPickerView) {
        pickerView.delegate = self
    }
    
    func setPickerViewDataSource(pickerView: UIPickerView) {
        pickerView.dataSource = self
    }
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return displayedCurrencies.count
    }
    
    public func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
//        dismissKeyboard()
        return displayedCurrencies[row].name
    }

    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)
    {
        _ = displayedCurrencies[pickerView.selectedRow(inComponent: 0)]
        calculateExchangeResult()
        dismissKeyboard()
    }
    
    public func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        
        var pickerLabel = view as! UILabel!
        //            let shadow = createShadow()
        if view == nil {  //if no label there yet
            pickerLabel = UILabel()
        }
        
        let titleData = displayedCurrencies[row % displayedCurrencies.count].name
        let myTitle = NSAttributedString(string: titleData, attributes: [NSFontAttributeName:UIFont.systemFont(ofSize: 42.0),NSForegroundColorAttributeName:UIColor(red: 255/255.0, green: 255/255.0, blue: 255/255.0, alpha: 1.0)])//, NSShadowAttributeName: shadow])
        pickerLabel!.attributedText = myTitle
        pickerLabel!.textAlignment = .center
        
        return pickerLabel!
    }
    
    public func pickerView(_ pickerView: UIPickerView, rowHeightForComponent component: Int) -> CGFloat {
        return 42.0
    }
    
    func switchPickerViewsData() {
        let inputIndex = inputCurrencyPickerView.selectedRow(inComponent: 0)
        let outputIndex = outputCurrencyPickerView.selectedRow(inComponent: 0)
        inputCurrencyPickerView.selectRow(outputIndex, inComponent: 0, animated: true)
        outputCurrencyPickerView.selectRow(inputIndex, inComponent: 0, animated: true)
        pickerView(inputCurrencyPickerView, didSelectRow: outputIndex, inComponent: 0)
        pickerView(outputCurrencyPickerView, didSelectRow: inputIndex, inComponent: 0)
    }
    
    // MARK: - UI methods
    
    private func animateDuringFetchingData() {
        let blurEffect = UIBlurEffect(style: UIBlurEffectStyle.dark)
        let blurEffectView = UIVisualEffectView(effect: blurEffect)
        blurEffectView.frame = view.bounds
        blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        
        view.addSubview(blurEffectView)
        view.addSubview(activityIndicator)
        activityIndicator.startAnimating()
    }
    
    func stopAnimatingWhenDataFetched() {
        activityIndicator.stopAnimating()
        for subview in view.subviews {
            if subview is UIVisualEffectView {
                subview.removeFromSuperview()
            }
        }
    }

}
