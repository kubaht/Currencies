//
//  CalculateExchangeRateViewControllerTests.swift
//  Currencies
//
//  Created by Jakub Hutny on 14.12.2016.
//  Copyright (c) 2016 Jakub Hutny. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import Currencies
import XCTest
import UIKit

class CalculateExchangeRateViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
  
    var sut: CalculateExchangeRateViewController!
    var window: UIWindow!
  
    // MARK: - Test lifecycle
  
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupCalculateExchangeRateViewController()
    }
  
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
  
    func setupCalculateExchangeRateViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "CalculateExchangeRateViewController") as! CalculateExchangeRateViewController
        sut.displayedCurrencies = [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency.init(name: "EUR")]
    }
  
    func loadView()
    {
        window.addSubview((sut?.view)!)
        RunLoop.current.run(until: Date())
    }
  
    // MARK: - Test doubles
    
    class CalculateExchangeRateViewControllerOutputSpy : CalculateExchangeRateViewControllerOutput {
        var fetchCurrenciesCalled = false
        var getInputLabelCalled = false
        var getOutputLabelCalled = false
        var getResultLabelCalled = false
        var calculateExchangeResultCalled = false
        
        func fetchCurrencies(request: CalculateExchangeRate.FetchCurrencies.Request) {
            fetchCurrenciesCalled = true
        }
        
        func getInputLabelName(request: CalculateExchangeRate.InputLabel.Request) {
            getInputLabelCalled = true
        }
        
        func getOutputLabelName(request: CalculateExchangeRate.OutputLabel.Request) {
            getOutputLabelCalled = true
        }
        
        func getResultLabel(request: CalculateExchangeRate.ResultLabel.Request) {
            getResultLabelCalled = true
        }
        
        func calculateExchangeResult(request: CalculateExchangeRate.ResultLabel.Request) {
            calculateExchangeResultCalled = true
        }
    }
    
    class UIPickerViewSpy: UIPickerView {
        var reloadAllComponentsCalled = false
        
        override func reloadAllComponents() {
            super.reloadAllComponents()
            reloadAllComponentsCalled = true
        }
    }
    
    // MARK: - Tests
  
    func testLoadProperDataWhenViewIsLoaded() {
        // Given
        let calculateExchangeRateViewControllerOutputSpy = CalculateExchangeRateViewControllerOutputSpy()
        sut?.output = calculateExchangeRateViewControllerOutputSpy
        
        // When
        loadView()
        
        // Then
        XCTAssert(calculateExchangeRateViewControllerOutputSpy.fetchCurrenciesCalled, "Should fetch currencies when view is loaded.")
        XCTAssert(calculateExchangeRateViewControllerOutputSpy.getInputLabelCalled, "Should get input label name when view is loaded.")
        XCTAssert(calculateExchangeRateViewControllerOutputSpy.getOutputLabelCalled, "Should get output label name when view is loaded.")
        XCTAssert(calculateExchangeRateViewControllerOutputSpy.getResultLabelCalled, "Should get result label name when view is loaded. ")
    }
    
    func testCalculateOutputResultWhenEditingDidEnd() {
        // Given
        let calculateExchangeRateViewControllerOutputSpy = CalculateExchangeRateViewControllerOutputSpy()
        sut?.output = calculateExchangeRateViewControllerOutputSpy
        sut.inputTextField = UITextField()
        sut.inputCurrencyPickerView = UIPickerViewSpy()
        sut.outputCurrencyPickerView = UIPickerViewSpy()
        
        // When
        sut.inputTextFieldEditingEnd(sut.inputTextField)
        
        // Then
        XCTAssert(calculateExchangeRateViewControllerOutputSpy.calculateExchangeResultCalled, "Should calculate exchange result when user end editing.")
    }
    
    func testShouldDisplayCurrenciesInPickerView() {
        // Given
        let inputUiPickerViewSpy = UIPickerViewSpy()
        let outputUiPickerViewSpy = UIPickerViewSpy()
        sut.inputCurrencyPickerView = inputUiPickerViewSpy
        sut.outputCurrencyPickerView = outputUiPickerViewSpy
        sut.quotationLabel = UILabel()
        sut.activityIndicator = UIActivityIndicatorView()
        let displayedCurrencies = [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "EUR"),
                                   CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "PLN")]
        let quotationDate = "October 24, 2016"
        let viewModel = CalculateExchangeRate.FetchCurrencies.ViewModel(date: quotationDate,displayedCurrencies: displayedCurrencies)
        
        // When
        sut.displayFetchedCurrencies(viewModel: viewModel)
        
        // Then
        XCTAssert(inputUiPickerViewSpy.reloadAllComponentsCalled, "Displaying fetched currencies should reload the input UIPickerView")
        XCTAssert(outputUiPickerViewSpy.reloadAllComponentsCalled, "Displaying fetched currencies should reload the output UIPickerView")
        XCTAssertEqual(sut.quotationLabel.text, quotationDate, "\"" + quotationDate + "\"" + " should be displayed in quotation label.")
    }
    
    func testShouldHaveOneComponentInPickerView() {
        // Given
        sut.inputCurrencyPickerView = UIPickerViewSpy()
        sut.outputCurrencyPickerView = UIPickerViewSpy()
        let inputCurrencyPickerView = sut.inputCurrencyPickerView
        let outputCurrencyPickerView = sut.outputCurrencyPickerView
        
        // When
        let numberOfComponentsInInputCurrencyPickerView = sut.numberOfComponents(in: inputCurrencyPickerView!)
        let numberOfComponentsInOutputCurrencyPickerView = sut.numberOfComponents(in: outputCurrencyPickerView!)
        
        // Then
        XCTAssertEqual(numberOfComponentsInInputCurrencyPickerView, 1, "Number of components in inputCurrencyPickerView should be equal to 1.")
        XCTAssertEqual(numberOfComponentsInOutputCurrencyPickerView, 1, "Number of components in outputCurrencyPickerView should be equal to 1.")
    }
    
    func testShouldHaveAllDisplayedCurrenciesInPickerView() {
        // Given
        sut.inputCurrencyPickerView = UIPickerViewSpy()
        sut.outputCurrencyPickerView = UIPickerViewSpy()
        let inputCurrencyPickerView = sut.inputCurrencyPickerView
        let outputCurrencyPickerView = sut.outputCurrencyPickerView
        let displayedCurrencies = [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "EUR"),
                                   CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "PLN")]
        sut.displayedCurrencies = displayedCurrencies
        
        // When
        let numberOfRowsInInputCurrencyPickerView = sut.pickerView(inputCurrencyPickerView!, numberOfRowsInComponent: 1)
        let numberOfRowsInOutputCurrencyPickerView = sut.pickerView(outputCurrencyPickerView!, numberOfRowsInComponent: 1)
        
        // Then
        XCTAssertEqual(numberOfRowsInInputCurrencyPickerView, 2, "Number of rows in inputCurrencyPickerView should be equal to 2.")
        XCTAssertEqual(numberOfRowsInOutputCurrencyPickerView, 2, "Number of rows in outputCurrencyPickerView should be equal to 2.")
        compareExpectedCurrenciesWithPickerView(displayedCurrencies: displayedCurrencies, pickerView: inputCurrencyPickerView!)
        compareExpectedCurrenciesWithPickerView(displayedCurrencies: displayedCurrencies, pickerView: outputCurrencyPickerView!)
    }
    
    func testShouldDisplayProperNameForRowInPickerView() {
        // Given
        sut.inputCurrencyPickerView = UIPickerViewSpy()
        sut.outputCurrencyPickerView = UIPickerViewSpy()
        let inputCurrencyPickerView = sut.inputCurrencyPickerView
        let outputCurrencyPickerView = sut.outputCurrencyPickerView
        let displayedCurrencies = [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "EUR"),
                                   CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency(name: "PLN")]
        sut.displayedCurrencies = displayedCurrencies
        
        // When
        let inputCurrencyPickerViewName = sut.pickerView(inputCurrencyPickerView!, titleForRow: 0, forComponent: 1)
        let outputCurrencyPickerViewName = sut.pickerView(outputCurrencyPickerView!, titleForRow: 1, forComponent: 1)
        
        // Then
        XCTAssertEqual(inputCurrencyPickerViewName, displayedCurrencies[0].name, "Currency name in PickerView differs from expected one in inputCurrencyPickerView.")
        XCTAssertEqual(outputCurrencyPickerViewName, displayedCurrencies[1].name, "Currency name in PickerView differs from expected one in outputCurrencyPickerView.")
    }
    
    func testShouldDisplayInputLabelName() {
        // Given
        sut.inputLabel = UILabel()
        let name = "Input"
        let viewModel = CalculateExchangeRate.InputLabel.ViewModel(name: name)
        
        // When
        sut.displayInputLabelName(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.inputLabel.text, name, "\"" + name + "\"" + " should be displayed in input label.")
    }
    
    func testShouldDisplayOutputLabelName() {
        // Given
        sut.outputLabel = UILabel()
        let name = "Output"
        let viewModel = CalculateExchangeRate.OutputLabel.ViewModel(name: name)
        
        // When
        sut.displayOutputLabelName(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.outputLabel.text, name, "\"" + name + "\"" + " should be displayed in output label.")
    }
    
    func testShouldDisplayResultLabelName() {
        sut.resultLabel = UILabel()
        let name = "5.00"
        let viewModel = CalculateExchangeRate.ResultLabel.ViewModel(name: name)
        
        // When
        sut.displayResultLabel(viewModel: viewModel)
        
        // Then
        XCTAssertEqual(sut.resultLabel.text, name, "\"" + name + "\"" + " should be displayed in result label.")
    }
    
    private func compareExpectedCurrenciesWithPickerView(displayedCurrencies: [CalculateExchangeRate.FetchCurrencies.ViewModel.DisplayedCurrency], pickerView: UIPickerView) {
        for rowIndex in 0...(displayedCurrencies.count - 1) {
            XCTAssertEqual(displayedCurrencies[rowIndex].name, sut.pickerView(pickerView, titleForRow: rowIndex, forComponent: 1)!, "Currency in PickerView differs from expected currency at row index " + String(rowIndex))
        }
    }
}
